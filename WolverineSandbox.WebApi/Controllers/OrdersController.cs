using Ardalis.Result;
using Ardalis.Result.AspNetCore;
using Microsoft.AspNetCore.Mvc;
using Wolverine;
using Wolverine.EntityFrameworkCore;
using WolverineSandbox.Domain.Events;
using WolverineSandbox.WebApi.Commands;
using WolverineSandbox.WebApi.Data;
using WolverineSandbox.WebApi.Entities;

namespace WolverineSandbox.WebApi.Controllers;

[Route("api/[controller]")]
[ApiController]
public class OrdersController : ControllerBase
{
    private readonly IMessageBus _bus;

    public OrdersController(IMessageBus bus)
    {
        _bus = bus;
    }

    [TranslateResultToActionResult]
    [ExpectedFailures(ResultStatus.Invalid, ResultStatus.Created)]
    [HttpPost]
    public async Task<Result<OrderCreated>> Create([FromBody] CreateOrderRequest request)
    {
        CreateOrder command = new(request.TotalAmount, request.regionCode, request.CustomerId);

        // NOTE: If the response (e.g. OrderCreated) is not captured, Wolverine
        // will automatically cascade the response to its handlers (if any).
        Result<OrderCreated> result = await _bus.InvokeAsync<Result<OrderCreated>>(command);

        return result;
    }

    [HttpPost("orders/create2")]
    public async Task Post([FromServices] IDbContextOutbox<ApplicationDbContext> outbox)
    {
        await using var transaction = await outbox.DbContext.Database.BeginTransactionAsync();

        try
        {
            Order order = new()
            {
                OrderDate = DateTimeOffset.UtcNow,
                TotalAmount = 666,
            };
            outbox.DbContext.Orders.Add(order);

            // First SaveChanges to get the Order Id generated by the database.
            await outbox.DbContext.SaveChangesAsync();

            await outbox.PublishAsync(new OrderCreated(order.Id, "MYS"),
                new DeliveryOptions().WithHeader("regionCode", "MYS"));

            // Second SaveChanges to ensure the OrderCreated event is stored in the outbox.
            await outbox.DbContext.SaveChangesAsync();

            //throw new InvalidOperationException("Simulate exception");

            await transaction.CommitAsync();
            await outbox.FlushOutgoingMessagesAsync();
        }
        catch (Exception)
        {
            await transaction.RollbackAsync();
        }
    }

    [HttpPost("{orderId}/Ship")]
    public async Task<IActionResult> Ship(Guid orderId, [FromBody] ShipOrderRequest request)
    {
        ShipOrder command = new(orderId, request.CustomerId);
        string response = await _bus.InvokeAsync<string>(command);
        return Ok(response);
    }
}

public record CreateOrderRequest(decimal TotalAmount, string regionCode, Guid? CustomerId = null);
public record ShipOrderRequest(Guid CustomerId);
